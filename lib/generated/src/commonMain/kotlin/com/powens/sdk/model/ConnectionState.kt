/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.powens.sdk.model


import kotlinx.serialization.*

/**
 * If the last update failed, the state code. The `null` value> indicates a successful sync.  * `SCARequired`: An SCA process must be performed to resume the synchronization process.  * `webauthRequired`: A web-based authentication process is required using the /webauth endpoint.  * `additionalInformationNeeded`: Additional information is needed to resume synchronization, such as an OTP. Connections in this state have a `fields` property.  * `decoupled`: User validation is required on a third-party app or device (ex: digital key).  * `validating`: User validation is being processed on our side. This state is temporary.  * `actionNeeded`: An action is needed on the website by the user, synchronization is blocked.  * `passwordExpired`: The password has expired and needs to be changed by the user before the synchronization can be retried.  * `wrongpass`: The authentication on website has failed and new credentials must be obtained from the user. Connections in this state have a `fields` property.  * `rateLimiting`: The target website or API is temporarily blocking synchronizations due to rate limiting.  * `websiteUnavailable`: The connector website or API is unavailable.  * `bug`: An internal error has occurred during the synchronization. 
 *
 * Values: SCARequired,WebAuthRequired,AdditionalInformationNeeded,Decoupled,Validating,ActionNeeded,PasswordExpired,WrongPass,RateLimiting,WebsiteUnavailable,Bug
 */
@Serializable
enum class ConnectionState(val value: kotlin.String) {

    @SerialName(value = "SCARequired")
    SCARequired("SCARequired"),

    @SerialName(value = "webauthRequired")
    WebAuthRequired("webauthRequired"),

    @SerialName(value = "additionalInformationNeeded")
    AdditionalInformationNeeded("additionalInformationNeeded"),

    @SerialName(value = "decoupled")
    Decoupled("decoupled"),

    @SerialName(value = "validating")
    Validating("validating"),

    @SerialName(value = "actionNeeded")
    ActionNeeded("actionNeeded"),

    @SerialName(value = "passwordExpired")
    PasswordExpired("passwordExpired"),

    @SerialName(value = "wrongpass")
    WrongPass("wrongpass"),

    @SerialName(value = "rateLimiting")
    RateLimiting("rateLimiting"),

    @SerialName(value = "websiteUnavailable")
    WebsiteUnavailable("websiteUnavailable"),

    @SerialName(value = "bug")
    Bug("bug");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ConnectionState) "$data" else null

        /**
         * Returns a valid [ConnectionState] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ConnectionState? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

