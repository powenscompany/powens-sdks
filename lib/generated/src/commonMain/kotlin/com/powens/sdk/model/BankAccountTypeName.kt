/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.powens.sdk.model


import kotlinx.serialization.*

/**
 * The type code of a bank account:  * `article83`: Article 83  * `capitalisation`: Capitalization contract  * `card`: Card  * `checking`: Checking account  * `crowdlending`: Crowdlending  * `deposit`: Deposit account  * `joint`: Joint account  * `lifeinsurance`: Life insurance account  * `loan`: Loan  * `madelin`: Madelin retirement contract  * `market`: Market account  * `pea`: Shared savings plan (Plan d’Épargne en Actions)  * `pee`: Company savings plan (Plan d’Épargne Entreprise)  * `per`: Retirement savings plan (Plan d’Épargne Retraite)  * `perco`: Group retirement savings plan (Plan d’Épargne pour la Retraite Collectif)  * `perp`: Popular retirement savings plan (Plan d’Épargne Retraite Populaire)  * `real_estate`: Real estate placement  * `rsp`: Special profit-sharing reserve (Réserve Spéciale de Participation)  * `savings`: Savings account  * `unknown`: Unknown account type 
 *
 * Values: Article83,Capitalization,Card,Checking,Crowdlending,Deposit,Joint,LifeInsurance,Loan,Madelin,Market,Pea,Pee,Per,Perco,Perp,RealEstate,Rsp,Savings,Unknown
 */
@Serializable
enum class BankAccountTypeName(val value: kotlin.String) {

    @SerialName(value = "article83")
    Article83("article83"),

    @SerialName(value = "capitalisation")
    Capitalization("capitalisation"),

    @SerialName(value = "card")
    Card("card"),

    @SerialName(value = "checking")
    Checking("checking"),

    @SerialName(value = "crowdlending")
    Crowdlending("crowdlending"),

    @SerialName(value = "deposit")
    Deposit("deposit"),

    @SerialName(value = "joint")
    Joint("joint"),

    @SerialName(value = "lifeinsurance")
    LifeInsurance("lifeinsurance"),

    @SerialName(value = "loan")
    Loan("loan"),

    @SerialName(value = "madelin")
    Madelin("madelin"),

    @SerialName(value = "market")
    Market("market"),

    @SerialName(value = "pea")
    Pea("pea"),

    @SerialName(value = "pee")
    Pee("pee"),

    @SerialName(value = "per")
    Per("per"),

    @SerialName(value = "perco")
    Perco("perco"),

    @SerialName(value = "perp")
    Perp("perp"),

    @SerialName(value = "real_estate")
    RealEstate("real_estate"),

    @SerialName(value = "rsp")
    Rsp("rsp"),

    @SerialName(value = "savings")
    Savings("savings"),

    @SerialName(value = "unknown")
    Unknown("unknown");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is BankAccountTypeName) "$data" else null

        /**
         * Returns a valid [BankAccountTypeName] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): BankAccountTypeName? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

