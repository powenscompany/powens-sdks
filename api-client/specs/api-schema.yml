openapi: 3.0.3
info:
  title: Powens API
  description: "WIP: This is a partial description of the services described in
    our [online reference
    documentation](https://docs.budget-insight.com/reference)."
  termsOfService: https://www.budget-insight.com/
  contact:
    email: contact@budget-insight.com
  version: "2.0"
externalDocs:
  description: Guides and Reference documentation
  url: https://docs.budget-insight.com
servers:
  - url: https://demo.biapi.pro/2.0
tags:
  - name: authentication
    description: Authentication
    externalDocs:
      description: Reference documentation
      url: https://docs.budget-insight.com/reference/authentication
  - name: users
    description: Users
    externalDocs:
      description: Reference documentation
      url: https://docs.budget-insight.com/reference/users
  - name: connectors
    description: Connectors
    externalDocs:
      description: Reference documentation
      url: https://docs.budget-insight.com/reference/connectors
  - name: connections
    description: Connections
    externalDocs:
      description: Reference documentation
      url: https://docs.budget-insight.com/reference/connections
  - name: bank-accounts
    description: Bank accounts
    externalDocs:
      description: Reference documentation
      url: https://docs.budget-insight.com/reference/bank-accounts
  - name: bank-account-types
    description: Bank account types
    externalDocs:
      description: Reference documentation
      url: https://docs.budget-insight.com/reference/bank-account-types
  - name: bank-transactions
    description: Transactions
    externalDocs:
      description: Reference documentation
      url: https://docs.budget-insight.com/reference/bank-transactions
x-tagGroups:
  - name: Core
    id: core
    tags:
      - authentication
      - users
  - name: Connections
    id: connections
    tags:
      - connectors
      - connections
    required:
      - core
  - name: Bank
    id: bank
    tags:
      - bank-accounts
      - bank-account-types
      - bank-transactions
    required:
      - connections
paths:
  /auth/init:
    post:
      tags:
        - authentication
      summary: Create a new anonymous user
      description: >
        This endpoint generates a new token related to a *new anonymous
        user*. If `client_id` and `client_secret` are both supplied, or if you
        call this endpoint with a manage token, the generated token will be
        *permanent*. Otherwise, it will expire after 30 minutes.
      operationId: initUserToken
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenRequest"
      responses:
        "200":
          description: Token successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
  /auth/token/code:
    get:
      tags:
        - authentication
      summary: Generate a temporary code
      description: >
        This endpoint requires header authentication with a valid user
        access token. This endpoint generates a new temporary code for the
        current user. In case the access token is already used by a trusted
        device, and you want to temporarily let another one (for example a web
        browser) access user resources, use this endpoint to generate a code
        that will expire in 30 minutes. If the generated code is intended to be
        used with our webview, you can use the singleAccess token type.
      operationId: getAuthCode
      parameters:
        - in: query
          name: type
          description: The type of the temporary code. Default is `requestAccess`.
          schema:
            type: string
            description: >
              The type of the temporary code:" * `requestAccess`: The code
              expires after 30 min. * `singleAccess`: The code can only be used
              once.
            enum:
              - requestAccess
              - singleAccess
      responses:
        "200":
          description: New code issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthCode"
  /auth/token/access:
    post:
      tags:
        - authentication
      summary: Exchange a temporary code for a permanent user access token
      description: >
        This endpoint uses the received temporary token to generate a
        permanent user access token.
      operationId: exchangeAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExchangeAccessTokenRequest"
      responses:
        "200":
          description: Token successfully issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeAccessToken"
  /auth/token:
    post:
      tags:
        - authentication
      summary: Generate a service token
      description: >
        This endpoint generates a special access token with a dedicated
        service scope. The generated token will expire after 30 minutes. A
        service token is a token that is not associated with a user but rather
        used to access a specific feature or service. For example, the Pay
        product requires the use of a payment token. Requested permissions are
        defined in the scope of the token.
      operationId: getServiceAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccessTokenRequest"
      responses:
        "200":
          description: Token successfully issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceAccessToken"
    delete:
      tags:
        - authentication
      summary: Revoke an access token
      description: >
        This endpoint invalidates permanent access tokens. Subsequent calls
        using the provided permanent access token will fail.
      operationId: revokeAccessToken
      responses:
        "204":
          description: Token successfully revoked
  /auth/renew:
    post:
      tags:
        - authentication
      summary: Generate a new permanent access token for an existing user
      description: >
        This endpoint generates a new permanent access token for an
        existing user, and revokes former tokens if explicitly requested.
      operationId: renewAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenewAccessTokenRequest"
      responses:
        "200":
          description: Token successfully issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeAccessToken"
  /users/me:
    get:
      tags:
        - users
      summary: Authenticated user
      description: Get information for the user associated with the authentication token.
      operationId: getUser
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
        - users
      summary: Delete the authenticated user
      description: Delete the user associated with the authorization token. All
        associated data is removed from the API.
      operationId: deleteUser
      responses:
        "204":
          description: User successfully deleted
  /connectors:
    parameters:
      - $ref: "#/components/parameters/ConnectorExpand"
    get:
      tags:
        - connectors
      summary: List connectors
      description: List all connectors available on a domain. By defaut, only
        connectors not `hidden` are returned.
      operationId: listConnectors
      responses:
        "200":
          description: List of connectors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorsList"
    patch:
      tags:
        - connectors
      summary: Batch enable/disable connectors
      description: Enable or disable a list of connectors by UUID in a single operation.
      operationId: updateConnectors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/ConnectorPatch"
      responses:
        "200":
          description: The list of updated connectors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorsList"
  "/connectors/{connectorId}":
    parameters:
      - $ref: "#/components/parameters/ConnectorId"
      - $ref: "#/components/parameters/ConnectorExpand"
    get:
      tags:
        - connectors
      summary: Connector
      description: Get a single connector by ID.
      operationId: getConnector
      responses:
        "200":
          description: Connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connector"
  "/connectors/{connectorUuid}":
    parameters:
      - $ref: "#/components/parameters/ConnectorUuid"
      - $ref: "#/components/parameters/ConnectorExpand"
    get:
      tags:
        - connectors
      summary: Connector
      description: Get a single connector by UUID.
      operationId: getConnectorByUuid
      responses:
        "200":
          description: Connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connector"
  "/connectors/{connectorIds}":
    parameters:
      - $ref: "#/components/parameters/ConnectorIds"
      - $ref: "#/components/parameters/ConnectorExpand"
    put:
      deprecated: true
      tags:
        - connectors
      summary: Batch enable/disable connectors (deprecated)
      description: Enable or disable a list of connectors by IDs in a single operation.
      operationId: batchEnableConnectorsById
      responses:
        "200":
          description: The list of updated connectors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorsList"
  /banks:
    parameters:
      - $ref: "#/components/parameters/ConnectorExpand"
    get:
      deprecated: true
      tags:
        - connectors
      summary: List banks
      description: List connectors with the `bank` capability. `Use /connectors` instead.
      operationId: listBanks
      responses:
        "200":
          description: List of connectors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BanksList"
  "/banks/{connectorId}":
    parameters:
      - $ref: "#/components/parameters/ConnectorId"
      - $ref: "#/components/parameters/ConnectorExpand"
    get:
      deprecated: true
      tags:
        - connectors
      summary: Bank connector
      description: Get a single bank connector by ID. Use `/connectors/{id}` instead.
      operationId: getBank
      responses:
        "200":
          description: Connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connector"
  /providers:
    parameters:
      - $ref: "#/components/parameters/ConnectorExpand"
    get:
      deprecated: true
      tags:
        - connectors
      summary: List providers
      description: List connectors with the `document` capability. `Use /connectors`
        instead.
      operationId: listProviders
      responses:
        "200":
          description: List of connectors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvidersList"
  "/providers/{connectorId}":
    parameters:
      - $ref: "#/components/parameters/ConnectorId"
      - $ref: "#/components/parameters/ConnectorExpand"
    get:
      deprecated: true
      tags:
        - connectors
      summary: Get a provider
      description: Get a single provider connector by ID. Use `/connectors/{id}` instead.
      operationId: getProvider
      responses:
        "200":
          description: Connector
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connector"
  /users/me/connections:
    parameters:
      - $ref: "#/components/parameters/ConnectionExpand"
    post:
      tags:
        - connections
      summary: Add a connection
      description: >
        Create a new connection for the authenticated user, for
        `credentials` connectors. The request implies a synchronous interaction
        with the connector website or API to perform the initial credentials
        check, so client-side timeouts must be configured to allow a reponse
        time up to a few minutes.
      operationId: createUserConnection
      parameters:
        - $ref: "#/components/parameters/ConnectionSource"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionRequest"
        required: true
      responses:
        "200":
          description: Connection successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "400":
          description: Invalid credentials submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bi_auth:
            - user
    get:
      tags:
        - connections
      summary: List connections
      description: List all connections of the authenticated user.
      operationId: listUserConnections
      responses:
        "200":
          description: List of connections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionsList"
      security:
        - bi_auth:
            - user
  "/users/me/connections/{connectionId}":
    parameters:
      - $ref: "#/components/parameters/ConnectionId"
      - $ref: "#/components/parameters/ConnectionExpand"
    get:
      tags:
        - connections
      summary: Connection
      description: Get a single connection of the authenticated user by ID.
      operationId: getUserConnection
      responses:
        "200":
          description: Connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
      security:
        - bi_auth:
            - user
    post:
      tags:
        - connections
      summary: Update and/or sync a connection
      description: Update the configuration or the credentials of a connection, and/or
        perform a sync afterward.
      operationId: updateSyncUserConnection
      parameters:
        - $ref: "#/components/parameters/ConnectionSource"
        - $ref: "#/components/parameters/Background"
      requestBody:
        description: The request can optionally include new credentials or values to
          update the connection. An empty request performs a sync.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionUpdateRequest"
        required: false
      responses:
        "200":
          description: Connection successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "400":
          description: Invalid credentials submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bi_auth:
            - user
    delete:
      tags:
        - connections
      summary: Delete a connection
      description: Delete a user connection. All associated data is permanently made
        unavailable in the API.
      operationId: deleteUserConnection
      responses:
        "204":
          description: Connection successfully deleted
      security:
        - bi_auth:
            - user
  /webauth:
    get:
      tags:
        - connections
      summary: Open the connector webview
      description: A special redirection endpoint for `webauth` connections. The URL
        must be opened in a browser.
      operationId: openWebauth
      parameters:
        - in: query
          name: client_id
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
          description: The client ID of your client application.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: A temporary authorization code to secure the call.
        - in: query
          name: redirect_uri
          schema:
            type: string
            format: url
          required: true
          description: The final redirect URL to be redirected to after the flow has
            completed. This URL must not contain query parameters. Be sure to
            properly encode it.
        - in: query
          name: id_connector
          schema:
            type: integer
            format: int64
            minimum: 1
          description: To add a new connection only, the ID of the connector. The
            connector must have webauth as its auth_mechanism.
        - in: query
          name: id_connection
          schema:
            type: integer
            format: int64
            minimum: 1
          description: To recover or resume a connection only, the ID of the connection.
        - $ref: "#/components/parameters/ConnectionSource"
        - in: query
          name: state
          schema:
            type: string
          description: An optional opaque string that will be returned 'as is' with the
            redirect URL.
      responses:
        "302":
          description: Redirection to the connector webview.
          headers:
            location:
              schema:
                type: string
                format: url
              description: The URL of the connector webview.
      callbacks:
        WebauthCallback:
          "{$request.query.redirect_uri}":
            get:
              operationId: webviewCallback
              parameters:
                - in: query
                  name: id_connection
                  schema:
                    type: integer
                    format: int64
                    minimum: 1
                  description: In case of success, the ID of the connection that was created or
                    updated during the webauth flow.
                - in: query
                  name: error
                  schema:
                    $ref: "#/components/schemas/ErrorCode"
                  description: This parameter is added if an error occurred.
                - in: query
                  name: error_description
                  schema:
                    type: string
                  description: The description of the error, if available.
              responses:
                "200":
                  description: The redirection happens in a browser, your `redirect_uri` must
                    handle and process the received paramaters.
  /users/me/accounts:
    parameters:
      - $ref: "#/components/parameters/FilteringAll"
      - $ref: "#/components/parameters/BankAccountExpand"
    get:
      tags:
        - bank-accounts
      summary: List bank accounts
      description: List bank accounts of the authenticated user. By default, only
        active (not `deleted`) accounts are returned, use the `all` parameter to
        get the full list.
      operationId: listUserAccounts
      responses:
        "200":
          description: List of bank accounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountsList"
        "400":
          $ref: "#/components/responses/NoAccountError"
      security:
        - bi_auth:
            - user
  "/users/me/accounts/{accountId}":
    parameters:
      - $ref: "#/components/parameters/BankAccountId"
      - $ref: "#/components/parameters/FilteringAll"
      - $ref: "#/components/parameters/BankAccountExpand"
    get:
      tags:
        - bank-accounts
      summary: Bank account
      description: Get a single bank account of the authenticated user by ID.
      operationId: getUserAccount
      responses:
        "200":
          description: Bank account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
      security:
        - bi_auth:
            - user
    post:
      tags:
        - bank-accounts
      summary: Update a bank account
      description: Update a bank account. The resource mirrors bank accounts available
        through the connector, so editing is limited to metadata.
      operationId: updateUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankAccountUpdateRequest"
        required: true
      responses:
        "200":
          description: Bank account successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
      security:
        - bi_auth:
            - user
  /account_types:
    get:
      tags:
        - bank-account-types
      summary: List bank account types
      description: List all bank account types available in the API.
      operationId: listBankAccountTypes
      responses:
        "200":
          description: List of bank accounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountTypesList"
  "/account_types/{typeId}":
    parameters:
      - $ref: "#/components/parameters/BankAccountTypeId"
    get:
      tags:
        - bank-account-types
      summary: Bank account type
      description: Get an bank account type by ID.
      operationId: getBankAccountType
      responses:
        "200":
          description: Bank account type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccountType"
  /users/me/transactions:
    parameters:
      - $ref: "#/components/parameters/TransactionExpand"
      - $ref: "#/components/parameters/FilteringAll"
    get:
      tags:
        - bank-transactions
      summary: List bank transactions
      description: List bank transactions of the authenticated user. By default, only
        active (not `deleted`) transactions are returned, use the `all`
        parameter to get the full list.
      operationId: listUserTransactions
      parameters:
        - in: query
          name: all
          schema:
            type: boolean
            enum:
              - true
          allowEmptyValue: true
          description: Flag to include disabled accounts in the list.
        - $ref: "#/components/parameters/TimedListMinDate"
        - $ref: "#/components/parameters/TimedListMaxDate"
        - in: query
          name: income
          schema:
            type: boolean
          description: Filter on incomes or expenditures.
        - in: query
          name: deleted
          schema:
            type: boolean
          description: Filter on deleted transactions.
        - in: query
          name: last_update
          schema:
            type: string
            format: bi-date-time
            pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          description: Filter transactions updated *after* the specified date.
        - in: query
          name: wording
          schema:
            type: string
          description: Filter transactions containing the given string.
        - in: query
          name: value
          schema:
            type: string
          description: Value of the transaction. "XX|-XX" and "±XX" syntaxes are also
            accepted.
        - in: query
          name: search
          schema:
            type: string
          description: Search in wording, dates, values, categories.
        - $ref: "#/components/parameters/ListOffset"
        - $ref: "#/components/parameters/ListLimit"
      responses:
        "200":
          description: List of bank transactions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionsList"
        "400":
          $ref: "#/components/responses/NoAccountError"
      security:
        - bi_auth:
            - user
  "/users/me/transactions/{transactionId}":
    parameters:
      - $ref: "#/components/parameters/TransactionId"
      - $ref: "#/components/parameters/FilteringAll"
      - $ref: "#/components/parameters/TransactionExpand"
    get:
      tags:
        - bank-transactions
      summary: Get a bank transaction
      description: Get a single bank transaction of the authenticated user by ID.
      operationId: getUserTransaction
      responses:
        "200":
          description: Transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
      security:
        - bi_auth:
            - user
    post:
      tags:
        - bank-transactions
      summary: Update a bank transaction
      description: Update a bank transaction. The resource mirrors bank transactions
        available through the connector, so editing is limited to metadata.
      operationId: updateUserTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionUpdateRequest"
        required: true
      responses:
        "200":
          description: Transaction successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
      security:
        - bi_auth:
            - user
components:
  schemas:
    AccessTokenRequest:
      type: object
      description: A request to obtain an access token.
      properties:
        client_id:
          type: string
          nullable: true
          description: Client ID of the application.
        client_secret:
          type: string
          nullable: true
          description: The client secret associated with the client ID.
    AccessToken:
      type: object
      description: An access token response with medata.
      properties:
        auth_token:
          type: string
          description: Access token to use to authenticate calls to the data endpoints.
        type:
          type: string
          description: Type of the access token.
          enum:
            - permanent
            - temporary
        id_user:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related user.
        expires_in:
          type: integer
          nullable: true
          description: Duration in seconds of the token validity. If not specified, the
            token does not expire.
      required:
        - auth_token
        - type
        - id_user
    AuthCode:
      type: object
      description: An authorization code response with metadata.
      properties:
        code:
          type: string
          description: The generated temporary code.
        type:
          type: string
          description: The type of the generated code. The only value is `temporary`.
          enum:
            - temporary
        access:
          type: string
          description: The type of access granted, `single` or `standard`.
          enum:
            - single
            - standard
        expires_in:
          type: integer
          nullable: true
          description: The expiration delay of the code, in seconds.
      required:
        - code
        - type
        - access
    ExchangeAccessTokenRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccessTokenRequest"
      properties:
        grant_type:
          type: string
          description: The only accepted (and default) value is `authorization_code`.
          enum:
            - authorization_code
        code:
          type: string
          description: The temporary code that was delivered.
        redirect_uri:
          type: string
          description: The exact `redirect_uri` that was specified during the initial
            OAuth2 step.
      required:
        - client_id
        - client_secret
        - code
    ExchangeAccessToken:
      type: object
      properties:
        access_token:
          type: string
          description: The generated permanent user access token.
        token_type:
          type: string
          description: The type of token. The only value is `Bearer`.
          enum:
            - Bearer
    ServiceAccessTokenRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccessTokenRequest"
      properties:
        grant_type:
          type: string
          description: The only accepted value is `client_credentials`.
          enum:
            - client_credentials
        scope:
          type: array
          items:
            $ref: "#/components/schemas/ServiceTokenScope"
          description: |
            The service permission scopes to authorize for this token.
      required:
        - grant_type
        - client_id
        - client_secret
        - scope
    ServiceAccessToken:
      type: object
      properties:
        token:
          type: string
          description: The generated service token.
        token_type:
          type: string
          description: The service token dedicated scope.
    ServiceTokenScope:
      type: string
      description: >
        The possible scopes are: * `payments:admin`: Grants all rights on
        payments. * `payments:read-only`: Only GET requests are allowed on
        payments. * `payments:allow-sensitive`: Grants read access on sensitive
        information for payments. * `payments:validate`: Allows to execute
        payments. * `payments:cancel`: Allows to submit payment cancellation
        requests. * ~~`payments`~~ (deprecated):  Alias for `payments:admin`.
      enum:
        - payments:admin
        - payments:read-only
        - payments:allow-sensitive
        - payments:validate
        - payments:cancel
        - payments
    RenewAccessTokenRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/AccessTokenRequest"
      properties:
        grant_type:
          type: string
          description: The only accepted value is `client_credentials`.
          enum:
            - client_credentials
        id_user:
          type: number
          description: User for whom the token has to be generated. If not supplied, a
            user will be created.
          format: int64
          minimum: 1
        revoke_previous:
          type: boolean
          description: If true, all other permanent tokens for the user will be deleted.
            The default is false.
      required:
        - grant_type
        - client_id
        - client_secret
        - code
    User:
      type: object
      description: A user, the root of personal data in the API.
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the user.
        signin:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          description: The creation date of the user.
      required:
        - id
        - signin
    TimedList:
      type: object
      properties:
        first_date:
          type: string
          format: date
          description: Minimum available date for results.
        last_date:
          type: string
          format: date
          description: Maximum available date for results.
        result_min_date:
          type: string
          format: date
          description: Minimum date of results in the current response.
        result_max_date:
          type: string
          format: date
          description: Maximum date of results in the current response.
      required:
        - first_date
        - last_date
        - result_min_date
        - result_max_date
    Error:
      type: object
      description: Common response format for API errors.
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        description:
          type: string
          description: A technical description of the error.
        message:
          type: string
          nullable: true
          description: An optional error message from the connector, intended for end-user
            display. The message is not translated.
      required:
        - code
        - description
    ErrorCode:
      type: string
      description: An error code.
      enum:
        - noAccount
        - wrongpass
        - websiteUnavailable
        - tooManySync
        - connectionLocked
        - bankMessage
        - actionNeeded
        - bug
        - notSupported
        - config
        - keymanager
        - dataError
    Connector:
      type: object
      description: A connector (bank or provider).
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the connector.
        uuid:
          type: string
          format: uuid
          description: Unique connector identifier, stable across API domains.
        name:
          type: string
          description: Name of the bank or provider.
        hidden:
          type: boolean
          nullable: true
          description: Whether this connector is hidden from users.
        charged:
          type: boolean
          description: Whether usage of this connector is charged.
        code:
          type: string
          nullable: true
          description: For bank connectors, the bank code.
        beta:
          type: boolean
          description: If true, this connector is likely instable.
        color:
          type: string
          format: hex-color
          nullable: true
          description: Branding color of the bank or provider.
        slug:
          type: string
          nullable: true
          description: A short letter code to identify the connector. Slugs are not unique.
        capabilities:
          type: array
          description: A list of capabilities supported by this connector.
          items:
            type: string
            enum:
              - bank
              - bankwealth
              - transfer
              - document
              - profile
              - contact
        urls:
          type: array
          nullable: true
          description: A list of websites associated with the connector.
          items:
            type: string
            format: url
        sync_periodicity:
          type: number
          format: float
          nullable: true
          description: How many days to wait between syncs.
        months_to_fetch:
          type: integer
          format: int32
          nullable: true
          description: Number of months of history to fetch when synchronizing a connection.
        auth_mechanism:
          $ref: "#/components/schemas/AuthMechanism"
        transfer_mechanism:
          $ref: "#/components/schemas/AuthMechanism"
        siret:
          type: string
          nullable: true
          description: For provider connectors, the SIRET code.
        restricted:
          type: boolean
          description: If true, new connections cannot be added with this connector.
        sources:
          type: array
          nullable: true
          description: "Optional `expand`: The details of the sources available for the
            connector."
          items:
            $ref: "#/components/schemas/ConnectorSource"
        fields:
          type: array
          nullable: true
          description: "Optional `expand`: The list of initial form fields associated with
            the connector. Only relevant when building a custom connection
            integration."
          items:
            $ref: "#/components/schemas/CredentialsField"
        countries:
          type: array
          nullable: true
          description: "Optional `expand`: Countries where users can open or have
            accounts/subscriptions with the given institution."
          items:
            type: object
            properties:
              id:
                type: string
                format: iso-3166-1-alpha-2
                description: The country ISO 3166-1 alpha-2 code.
              name:
                type: string
                description: The country name.
      required:
        - id
        - uuid
        - name
        - charged
        - beta
        - capabilities
        - auth_mechanism
        - restricted
    ConnectorSource:
      type: object
      description: A connector source, to perform a partial sync of data regarding
        PSD2 regulation.
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the connector source.
        id_connector:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related connector.
        name:
          type: string
          pattern: ^[a-z]+$
          description: Name of the connector source.
        auth_mechanism:
          $ref: "#/components/schemas/AuthMechanism"
        disabled:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: If set, this source is ignored on synchronizing the connection.
        priority:
          type: integer
          format: int32
          description: The source priority order for the synchronization. Sources must be
            added following priority order.
      required:
        - id
        - id_connector
        - name
        - auth_mechanism
        - priority
    ConnectorsList:
      type: object
      description: A list of connectors.
      properties:
        connectors:
          type: array
          description: The connectors list.
          items:
            $ref: "#/components/schemas/Connector"
      required:
        - connectors
    BanksList:
      type: object
      deprecated: true
      description: A list of bank connectors.
      properties:
        banks:
          type: array
          description: The connectors list.
          items:
            $ref: "#/components/schemas/Connector"
      required:
        - banks
    ProvidersList:
      type: object
      deprecated: true
      description: A list of provider connectors.
      properties:
        providers:
          type: array
          description: The connectors list.
          items:
            $ref: "#/components/schemas/Connector"
      required:
        - providers
    ConnectorPatch:
      type: object
      properties:
        hidden:
          type: boolean
          nullable: true
          description: Whether this connector is hidden from users.
    ConnectionRequest:
      type: object
      description: A request to create a new connection. To add a connection to a
        connector/source using `credentials` *AuthMechanism*, you must also
        include in the request values from the connector `fields` definition.
      properties:
        id_connector:
          type: integer
          format: int64
          minimum: 1
          description: ID of the connector. Required if `connector_uuid` is not provided.
        connector_uuid:
          type: string
          format: uuid
          description: UUID of the connector. Required if `id_connector` is not provided.
      additionalProperties:
        type: string
      example:
        connector_uuid: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        username: test
        password: hello
    Connection:
      type: object
      description: A connection materializes the link between a user and a connector.
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the connection.
        id_user:
          type: integer
          format: int64
          minimum: 1
          nullable: true
          description: ID of the related user.
        id_connector:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related connector.
        id_provider:
          type: integer
          format: int64
          minimum: 1
          deprecated: true
          description: ID of the provider.
        id_bank:
          type: integer
          format: int64
          minimum: 1
          deprecated: true
          description: ID of the bank.
        state:
          $ref: "#/components/schemas/ConnectionState"
        error:
          $ref: "#/components/schemas/ConnectionState"
        error_message:
          type: string
          nullable: true
          description: If the last update failed, an optional message from the connector
            to guide the user into recovering from the error.
        fields:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/CredentialsField"
          description: For connections in an error state, an optional list of form fields
            that must be prompted to the end-user.
        last_update:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Last successful update.
        created:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          description: Creation date of the connection.
        active:
          type: boolean
          description: Whether this connection is active and will be automatically synced.
        last_push:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Last successful push.
        expire:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Highest value among expiration dates of connection sources.
        connector_uuid:
          type: string
          format: uuid
          description: UUID of the connector. Required if `id_connector` is not provided.
        next_try:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Scheduled date of next synchronization.
        connector:
          type: object
          allOf:
            - $ref: "#/components/schemas/Connector"
          nullable: true
          description: "Optional `expand`: The connector associated with this connection."
          example: null
        sources:
          type: array
          items:
            $ref: "#/components/schemas/ConnectionSource"
          nullable: true
          description: "Optional `expand`: The details of the sources configured for the
            connection."
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/BankAccount"
          nullable: true
          description: "Optional `expand`: The list of activated bank accounts associated
            with the connection (disabled accounts are omitted)."
          example: null
          x-requiredTags:
            - connections
        all_accounts:
          type: array
          items:
            $ref: "#/components/schemas/BankAccount"
          nullable: true
          description: "Optional `expand`: The list of all bank accounts associated with
            the connection, including disabled ones."
          example: null
          x-requiredTags:
            - connections
      required:
        - id
        - id_connector
        - created
        - active
    ConnectionSource:
      type: object
      description: A connection source, to describe partial sync of data for this
        connection regarding PSD2 regulation.
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the connection connection.
        id_connection:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related connection.
        id_connector_source:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related connector source.
        name:
          type: string
          pattern: ^[a-z]+$
          description: Technical code name of the connection source.
        state:
          $ref: "#/components/schemas/ConnectionState"
        last_update:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Last successful update of the source.
        disabled:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: If set, this source is ignored on synchronizing the connection.
        created:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          description: Creation date of the source.
        next_try:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Scheduled date of next synchronization.
        access_expire:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Expiration date of the access, if known.
      required:
        - id
        - id_connection
        - id_connector_source
        - name
        - created
    ConnectionState:
      type: string
      nullable: true
      description: >
        If the last update failed, the state code. The `null` value
        indicates a successful sync.
         * `SCARequired`: An SCA process must be performed to resume the synchronization process.
         * `webauthRequired`: A web-based authentication process is required using the /webauth endpoint.
         * `additionalInformationNeeded`: Additional information is needed to resume synchronization, such as an OTP. Connections in this state have a `fields` property.
         * `decoupled`: User validation is required on a third-party app or device (ex: digital key).
         * `validating`: User validation is being processed on our side. This state is temporary.
         * `actionNeeded`: An action is needed on the website by the user, synchronization is blocked.
         * `passwordExpired`: The password has expired and needs to be changed by the user before the synchronization can be retried.
         * `wrongpass`: The authentication on website has failed and new credentials must be obtained from the user. Connections in this state have a `fields` property.
         * `rateLimiting`: The target website or API is temporarily blocking synchronizations due to rate limiting.
         * `websiteUnavailable`: The connector website or API is unavailable.
         * `bug`: An internal error has occurred during the synchronization.
      enum:
        - SCARequired
        - webauthRequired
        - additionalInformationNeeded
        - decoupled
        - validating
        - actionNeeded
        - passwordExpired
        - wrongpass
        - rateLimiting
        - websiteUnavailable
        - bug
        - null
    ConnectionUpdateRequest:
      type: object
      description: A request to update or sync a connection.
      properties:
        resume:
          type: string
          description: Resume a connection in the decoupled state.
          enum:
            - true
      additionalProperties:
        type: string
      example:
        resume: true
    ConnectionsList:
      type: object
      description: A list of connections.
      properties:
        connections:
          type: array
          description: The list of connections.
          items:
            $ref: "#/components/schemas/Connection"
      required:
        - connections
    CredentialsField:
      type: object
      properties:
        name:
          type: string
          description: Technical name of the field.
        type:
          type: string
          enum:
            - text
            - list
            - date
            - number
            - password
          description: The type of the field, to determine the appropriate UI component.
        auth_mechanisms:
          type: array
          items:
            $ref: "#/components/schemas/AuthMechanism"
          description: The list of the authentication mechanisms associated with this field.
        label:
          type: string
          description: A short display label for the field.
        description:
          type: string
          nullable: true
          description: A longer help text for the field.
        required:
          type: boolean
          description: Whether posting the field value is required when creating or
            updating the connection.
        regex:
          type: string
          format: regex
          nullable: true
          description: An optional regular expression that the value must match.
        values:
          type: array
          nullable: true
          description: For `list` fields, the possible values.
          items:
            type: object
            properties:
              value:
                type: string
                description: The value to use for the field.
              label:
                type: string
                description: The display label associated with the value.
      required:
        - name
        - type
        - auth_mechanisms
        - label
        - required
    AuthMechanism:
      type: string
      description: A supported authentication mechanism to use when interacting with
        the connection services. `credentials` connectors or sources rely on
        posting values on the connection creation or update endpoint, whereas
        `webauth` implies usage of the /webauth redirection endpoint.
      enum:
        - credentials
        - webauth
    BankAccount:
      type: object
      description: A bank account.
      allOf:
        - $ref: "#/components/schemas/BankAccountUpdateRequest"
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the bank account.
        id_connection:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related connection.
        id_user:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related user.
        id_source:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related connection source.
        id_parent:
          type: integer
          format: int64
          minimum: 1
          nullable: true
          description: ID of the parent account, if any.
        original_name:
          type: string
          description: Original name of the account, as exposed on the connector API or
            website.
        balance:
          type: number
          format: monetary
          nullable: true
          description: The balance of the bank account.
        coming:
          type: number
          format: monetary
          nullable: true
          description: Amount of coming operations not yet debited.
        currency:
          type: object
          nullable: true
          description: Currency of the bank account.
          allOf:
            - $ref: "#/components/schemas/Currency"
        type:
          $ref: "#/components/schemas/BankAccountTypeName"
        id_type:
          type: number
          format: int64
          minimum: 1
          description: Bank account type
        last_update:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Last successful update of the account.
        deleted:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: If set, this account is not found on the website anymore.
        disabled:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: If set, this account has been disabled by user and will not be
            synchronized.
        number:
          type: string
          nullable: true
          description: The bank account number, if available.
        iban:
          type: string
          format: iban
          nullable: true
          description: The bank account IBAN, if available.
        loan:
          type: object
          nullable: true
          description: For `loan` accounts, the loan details.
          properties:
            total_amount:
              type: number
              format: monetary
              nullable: true
              description: Total amount of the loan.
            available_amount:
              type: number
              format: monetary
              nullable: true
              description: Amount of the loan not yet released and still available.
            used_amount:
              type: number
              format: monetary
              nullable: true
              description: Amount of the load already used.
            subscription_date:
              type: string
              format: date
              nullable: true
              description: Subscription date of the loan.
            maturity_date:
              type: string
              format: date
              nullable: true
              description: Estimated end date of the loan.
            next_payment_amount:
              type: number
              format: monetary
              nullable: true
              description: Amount of the next payment.
            next_payment_date:
              type: string
              format: date
              nullable: true
              description: Date of the next payment.
            rate:
              type: number
              format: double
              nullable: true
              description: Rate of the loan.
            nb_payments_left:
              type: integer
              format: int32
              nullable: true
              description: Number of payments still due.
            nb_payments_done:
              type: integer
              format: int32
              nullable: true
              description: Number of payments done.
            nb_payments_total:
              type: integer
              format: int32
              nullable: true
              description: Total number of payments.
            last_payment_amount:
              type: number
              format: monetary
              nullable: true
              description: Amount of the last payment.
            last_payment_date:
              type: string
              format: date
              nullable: true
              description: Date of the last payment.
            account_label:
              type: string
              nullable: true
              description: Name of the debited account.
            insurance_label:
              type: string
              nullable: true
              description: Label of the insurance.
            duration:
              type: integer
              format: int32
              nullable: true
              description: Duration of the loan, in months.
            type:
              type: string
              nullable: true
              description: Type of the loan (`mortgage`, `consumercredit` or
                `revolvingcredit`)
        connection:
          type: object
          allOf:
            - $ref: "#/components/schemas/Connection"
          nullable: true
          description: "Optional `expand`: The connection associated with this bank
            account."
          example: null
          x-requiredTags:
            - connections
      required:
        - id
        - id_connection
        - id_user
        - id_source
        - name
        - original_name
        - type
        - id_type
        - usage
        - display
        - bookmarked
    Currency:
      type: object
      description: Metadata of a currency.
      properties:
        id:
          type: string
          format: iso-4217
          description: The ISO 4217 code of the currency.
        name:
          type: string
          description: Display name of the currency.
        symbol:
          type: string
          description: Display symbol of the currency.
        precision:
          type: integer
          format: int32
          description: Decimal precision of the currency.
      required:
        - id
        - name
        - symbol
        - precision
    BankAccountTypeName:
      type: string
      description: >
        The type code of a bank account:
         * `article83`: Article 83
         * `capitalisation`: Capitalization contract
         * `card`: Card
         * `checking`: Checking account
         * `crowdlending`: Crowdlending
         * `deposit`: Deposit account
         * `joint`: Joint account
         * `lifeinsurance`: Life insurance account
         * `loan`: Loan
         * `madelin`: Madelin retirement contract
         * `market`: Market account
         * `pea`: Shared savings plan (Plan d'Epargne en Actions)
         * `pee`: Company savings plan (Plan d'Epargne Entreprise)
         * `per`: Retirement savings plan (Plan d'Epargne Retraite)
         * `perco`: Group retirement savings plan (Plan d'Epargne pour la Retraite Collectif)
         * `perp`: Popular retirement savings plan (Plan d'Epargne Retraite Populaire)
         * `real_estate`: Real estate placement
         * `rsp`: Special profit-sharing reserve (Réserve Spéciale de Participation)
         * `savings`: Savings account
         * `unknown`: Unknown account type
      enum:
        - Article83
        - capitalisation
        - card
        - checking
        - crowdlending
        - deposit
        - joint
        - lifeinsurance
        - loan
        - madelin
        - market
        - pea
        - pee
        - per
        - perco
        - perp
        - real_estate
        - rsp
        - savings
        - unknown
    BankAccountUsage:
      type: string
      description: |
        Account usage:
          * `PRIV`: Private account
          * `ORGA`: Professional account
          * `ASSO`: Community
      enum:
        - PRIV
        - ORGA
        - ASSO
    BankAccountUpdateRequest:
      type: object
      description: A request to update metadata of a bank account.
      properties:
        display:
          type: boolean
          description: Whether the bank account should be displayed and included in
            aggregated metrics.
        name:
          type: string
          description: Display name of the account.
        disabled:
          type: boolean
          description: Whether the bank account should be synchronized.
        bookmarked:
          type: boolean
          description: Whether the bank account is bookmarked.
        usage:
          $ref: "#/components/schemas/BankAccountUsage"
    BankAccountType:
      type: object
      description: Details about a bank account type
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the bank account type.
        name:
          $ref: "#/components/schemas/BankAccountTypeName"
        id_parent:
          type: integer
          format: int64
          minimum: 1
          nullable: true
          description: Optional, the ID of the parent type.
        is_invest:
          type: boolean
          description: Whether the type corresponds to an 'investment' account type. These
            types usually present investments and may have limitations regarding
            transfers.
        display_name:
          type: string
          description: The display name of the account type, in French.
        display_name_p:
          type: string
          description: The plural display name of the account type, in French.
      required:
        - id
        - name
        - is_invest
        - display_name
        - display_name_p
    BankAccountTypesList:
      type: object
      properties:
        accounttypes:
          type: array
          items:
            $ref: "#/components/schemas/BankAccountType"
      required:
        - accounttypes
    BankAccountsList:
      type: object
      description: A list of bank accounts.
      properties:
        accounts:
          type: array
          description: The accounts list.
          items:
            $ref: "#/components/schemas/BankAccount"
        balances:
          type: object
          description: Associative map of ISO 4217 currency codes to the total balance of
            accounts in the given currency.
          additionalProperties:
            type: number
            format: monetary
            nullable: true
          example:
            EUR: 12.34
      required:
        - accounts
        - balances
    Transaction:
      type: object
      description: A bank transaction.
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: ID of the transaction.
        id_account:
          type: integer
          format: int64
          minimum: 1
          description: ID of the related account.
        application_date:
          type: string
          format: date
          nullable: true
          description: Date considered by PFM services. This date can be edited.
        date:
          type: string
          format: date
          description: Debit date.
        datetime:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Date and time of the debit of the transaction, if available, in UTC.
        value:
          type: number
          format: monetary
          nullable: true
          description: Value of the transaction.
        gross_value:
          type: number
          format: monetary
          nullable: true
          description: Gross value of the transaction.
        original_value:
          type: number
          format: monetary
          nullable: true
          description: Value in the original currency.
        original_gross_value:
          type: number
          format: monetary
          nullable: true
          description: Gross value in the original currency.
        original_currency:
          type: object
          nullable: true
          description: Original currency.
          allOf:
            - $ref: "#/components/schemas/Currency"
        commission:
          type: number
          format: monetary
          nullable: true
          description: Commission taken on the transaction.
        commission_currency:
          type: object
          nullable: true
          description: Commission currency.
          allOf:
            - $ref: "#/components/schemas/Currency"
        type:
          $ref: "#/components/schemas/TransactionType"
        wording:
          type: string
          nullable: true
          description: Label of the transaction, can be edited.
        id_category:
          type: number
          format: int64
          minimum: 1
          nullable: true
          deprecated: true
          description: ID of the related category.
        date_scraped:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          description: Date and time when the transaction has been seen.
        rdate:
          type: string
          format: date
          description: Realization date of the transaction.
        rdatetime:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Realization date and time of the transaction, if available, in UTC.
        vdate:
          type: string
          format: date
          nullable: true
          description: Value date of the transaction.
        vdatetime:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Value date and time of the transaction, if available, in UTC.
        bdate:
          type: string
          format: date
          nullable: true
          description: Date used by the bank for the transaction.
        bdatetime:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Date and time used by the bank for the transaction, if available,
            in UTC.
        coming:
          type: boolean
          description: If true, this transaction hasn't been debited yet.
        active:
          type: boolean
          description: If false, PFM services will ignore this transaction.
        id_cluster:
          type: integer
          format: int64
          minimum: 1
          nullable: true
          description: If the transaction is part of a cluster.
        country:
          type: string
          nullable: true
          description: Original country.
        card:
          type: string
          nullable: true
          description: Card number associated with the transaction.
        counterparty:
          type: object
          nullable: true
          description: The transaction counterparty, i.e. an optional business or
            individual entity associated with the transaction.
          allOf:
            - $ref: "#/components/schemas/TransactionCounterparty"
        comment:
          type: string
          nullable: true
          description: User comment.
        last_update:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: Last update of the transaction.
        deleted:
          type: string
          format: bi-date-time
          pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
          nullable: true
          description: If set, this transaction has been removed from the bank.
        account:
          type: object
          nullable: true
          description: "Optional `expand`: The bank account associated with this
            transaction."
          allOf:
            - $ref: "#/components/schemas/BankAccount"
          example: null
      required:
        - id
        - id_account
        - date
        - type
        - date_scraped
        - rdate
        - coming
        - active
    TransactionType:
      type: string
      description: |
        The type of a bank transaction:
         * `transfer`: Transfer
         * `order`: Order
         * `check`: Check
         * `deposit`: Deposit
         * `payback`: Payback
         * `withdrawal`: Withdrawal
         * `loan_payment`: Loan payment
         * `bank`: Bank fees
         * `card`: Card operation
         * `deferred_card`: Deferred card operation
         * `summary_card`: Mensual debit of a deferred card
         * `unknown`: Unknown transaction type
      enum:
        - transfer
        - order
        - check
        - deposit
        - payback
        - withdrawal
        - loan_payment
        - bank
        - card
        - deferred_card
        - summary_card
        - unknown
    TransactionCounterparty:
      type: object
      description: Business or individual entity associated with a bank transaction.
      properties:
        label:
          type: string
          nullable: true
          description: Label/name of the counterparty.
        account_scheme_name:
          nullable: true
          description: Type of the counterparty account number.
          $ref: "#/components/schemas/AccountSchemeName"
        account_identification:
          type: string
          nullable: true
          description: Account number of the counterparty.
        type:
          type: string
          nullable: true
          description: "Type of the counterparty: `creditor` or `debtor`."
          enum:
            - creditor
            - debtor
    AccountSchemeName:
      type: string
      description: |
        Type of identifier provided for a bank account:
         * `iban`: International Bank Account Number
         * `bban`: Basic Bank Account Number
         * `sort_code_account_number`: United Kingdom local account number
      enum:
        - iban
        - bban
        - sort_code_account_number
    TransactionUpdateRequest:
      type: object
      description: A request to update metadata of a bank transaction.
      properties:
        wording:
          type: string
          description: New wording of the transaction.
        application_date:
          type: string
          format: date
          description: New application date of the transaction.
        id_category:
          type: integer
          format: int64
          minimum: 1
          deprecated: true
          description: New category ID of the transaction.
        comment:
          type: string
          description: New comment of the transaction.
        active:
          type: boolean
          description: If false, the transaction isn't considered in analyzisis endpoints.
    TransactionsList:
      type: object
      description: A list of bank transactions.
      allOf:
        - $ref: "#/components/schemas/TimedList"
      properties:
        transactions:
          type: array
          description: The transactions list.
          items:
            $ref: "#/components/schemas/Transaction"
      required:
        - transactions
  parameters:
    ListOffset:
      in: query
      name: offset
      schema:
        type: number
        format: int32
      description: Return items after the specified offset.
    ListLimit:
      in: query
      name: limit
      schema:
        type: number
        format: int32
      description: Return at most the specified amount of items.
    TimedListMinDate:
      in: query
      name: min_date
      schema:
        type: string
        format: date
      description: Filter items after the specified date.
    TimedListMaxDate:
      in: query
      name: max_date
      schema:
        type: string
        format: date
      description: Filter items before the specified date.
    FilteringAll:
      in: query
      name: all
      schema:
        type: boolean
        enum:
          - true
      allowEmptyValue: true
      description: Flag to include disabled and deleted items in the list.
    Background:
      in: query
      name: background
      schema:
        type: boolean
        enum:
          - true
      allowEmptyValue: true
      description: Flag to make the request asynchronous (i.e. the API will respond
        immediately and process the action in background). When using this
        option, you must implement polling on the resource to monitor the state.
    ConnectorId:
      in: path
      name: connectorId
      description: Connector ID.
      schema:
        type: integer
        format: int64
        minimum: 1
      required: true
    ConnectorUuid:
      in: path
      name: connectorUuid
      description: Connector UUID.
      schema:
        type: string
        format: uuid
      required: true
    ConnectorIds:
      in: path
      name: connectorIds
      description: Connector IDs.
      schema:
        type: array
        items:
          type: integer
          format: int64
          minimum: 1
      required: true
    ConnectorExpand:
      in: query
      name: expand
      schema:
        type: array
        items:
          type: string
          enum:
            - fields
            - sources
            - countries
      explode: false
      allowReserved: true
    ConnectionId:
      in: path
      name: connectionId
      schema:
        type: integer
        format: int64
        minimum: 1
      description: Connection ID.
      required: true
    ConnectionExpand:
      in: query
      name: expand
      schema:
        type: array
        items:
          type: string
          enum:
            - connector
            - sources
            - accounts
            - all_accounts
      explode: false
      allowReserved: true
    ConnectionSource:
      in: query
      name: source
      schema:
        type: string
        pattern: ^[a-z]+$
        description: The specific source (designated by its `name`) to target when
          interacting with multi-source bank connectors.
    BankAccountId:
      in: path
      name: accountId
      description: Bank account ID.
      schema:
        type: integer
        format: int64
        minimum: 1
      required: true
    BankAccountExpand:
      in: query
      name: expand
      schema:
        type: array
        items:
          type: string
          enum:
            - connection
      explode: false
      allowReserved: true
    BankAccountTypeId:
      in: path
      name: typeId
      description: Bank account type ID.
      schema:
        type: integer
        format: int64
        minimum: 1
      required: true
    TransactionId:
      in: path
      name: transactionId
      description: Transaction ID.
      schema:
        type: integer
        format: int64
        minimum: 1
      required: true
    TransactionExpand:
      in: query
      name: expand
      schema:
        type: array
        items:
          type: string
          enum:
            - account
            - documents
      explode: false
      allowReserved: true
  responses:
    NoAccountError:
      description: No bank account is available. The error code is `noAccount`.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    bi_auth:
      type: oauth2
      description: OAuth2 authentication
      flows:
        clientCredentials:
          tokenUrl: https://demo.biapi.pro/2.0/auth/token
          scopes:
            user: Defaut scope for user-scoped access tokens
