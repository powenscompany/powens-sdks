/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.powens.client

import com.powens.api.model.AdditionalProperties
import com.powens.api.model.BanksList
import com.powens.api.model.Connector
import com.powens.api.model.ConnectorPatch
import com.powens.api.model.ConnectorsList
import com.powens.api.model.ProvidersList

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ConnectorsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Batch enable/disable connectors (deprecated)
     * Enable or disable a list of connectors by IDs in a single operation.
     * @param connectorIds Connector IDs.
     * @param expand  (optional)
     * @return ConnectorsList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun batchEnableConnectorsById(connectorIds: kotlin.collections.List<kotlin.Long>, expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<ConnectorsList> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/connectors/{connectorIds}".replace("{" + "connectorIds" + "}", connectorIds.joinToString(",")),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Bank connector
     * Get a single bank connector by ID. Use &#x60;/connectors/{id}&#x60; instead.
     * @param connectorId Connector ID.
     * @param expand  (optional)
     * @return Connector
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getBank(connectorId: kotlin.Long, expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<Connector> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/banks/{connectorId}".replace("{" + "connectorId" + "}", "$connectorId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Connector
     * Get a single connector by ID.
     * @param connectorId Connector ID.
     * @param expand  (optional)
     * @return Connector
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getConnector(connectorId: kotlin.Long, expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<Connector> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/connectors/{connectorId}".replace("{" + "connectorId" + "}", "$connectorId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Connector
     * Get a single connector by UUID.
     * @param connectorUuid Connector UUID.
     * @param expand  (optional)
     * @return Connector
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getConnectorByUuid(connectorUuid: kotlin.String, expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<Connector> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/connectors/{connectorUuid}".replace("{" + "connectorUuid" + "}", "$connectorUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get a provider
     * Get a single provider connector by ID. Use &#x60;/connectors/{id}&#x60; instead.
     * @param connectorId Connector ID.
     * @param expand  (optional)
     * @return Connector
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getProvider(connectorId: kotlin.Long, expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<Connector> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/providers/{connectorId}".replace("{" + "connectorId" + "}", "$connectorId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List banks
     * List connectors with the &#x60;bank&#x60; capability. &#x60;Use /connectors&#x60; instead.
     * @param expand  (optional)
     * @return BanksList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listBanks(expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<BanksList> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/banks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List connectors
     * List all connectors available on a domain. By defaut, only connectors not &#x60;hidden&#x60; are returned.
     * @param expand  (optional)
     * @return ConnectorsList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listConnectors(expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<ConnectorsList> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/connectors",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List providers
     * List connectors with the &#x60;document&#x60; capability. &#x60;Use /connectors&#x60; instead.
     * @param expand  (optional)
     * @return ProvidersList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listProviders(expand: kotlin.collections.List<kotlin.String>? = null): HttpResponse<ProvidersList> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/providers",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Batch enable/disable connectors
     * Enable or disable a list of connectors by UUID in a single operation.
     * @param expand  (optional)
     * @param requestBody  (optional)
     * @return ConnectorsList
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateConnectors(expand: kotlin.collections.List<kotlin.String>? = null, requestBody: AdditionalProperties<kotlin.String, ConnectorPatch>? = null): HttpResponse<ConnectorsList> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = UpdateConnectorsRequest(requestBody ?: emptyMap())

        val localVariableQuery = mutableMapOf<String, List<String>>()
        expand?.apply { localVariableQuery["expand"] = toMultiValue(this, "csv") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/connectors",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable
    private class UpdateConnectorsRequest(val value: Map<kotlin.String, ConnectorPatch>) {
        @Serializer(UpdateConnectorsRequest::class)
        companion object : KSerializer<UpdateConnectorsRequest> {
            private val serializer: KSerializer<Map<kotlin.String, ConnectorPatch>> = serializer<Map<String, ConnectorPatch>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UpdateConnectorsRequest) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UpdateConnectorsRequest(serializer.deserialize(decoder))
        }
    }

}
