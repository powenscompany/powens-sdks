/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.powens.api.model


import kotlinx.serialization.*

/**
 * The type of a bank transaction:  * `transfer`: Transfer  * `order`: Order  * `check`: Check  * `deposit`: Deposit  * `payback`: Payback  * `withdrawal`: Withdrawal  * `loan_payment`: Loan payment  * `bank`: Bank fees  * `card`: Card operation  * `deferred_card`: Deferred card operation  * `summary_card`: Mensual debit of a deferred card  * `unknown`: Unknown transaction type 
 *
 * Values: transfer,order,check,deposit,payback,withdrawal,loanPayment,bank,card,deferredCard,summaryCard,unknown
 */
@Serializable
enum class TransactionType(val value: kotlin.String) {

    @SerialName(value = "transfer")
    transfer("transfer"),

    @SerialName(value = "order")
    order("order"),

    @SerialName(value = "check")
    check("check"),

    @SerialName(value = "deposit")
    deposit("deposit"),

    @SerialName(value = "payback")
    payback("payback"),

    @SerialName(value = "withdrawal")
    withdrawal("withdrawal"),

    @SerialName(value = "loan_payment")
    loanPayment("loan_payment"),

    @SerialName(value = "bank")
    bank("bank"),

    @SerialName(value = "card")
    card("card"),

    @SerialName(value = "deferred_card")
    deferredCard("deferred_card"),

    @SerialName(value = "summary_card")
    summaryCard("summary_card"),

    @SerialName(value = "unknown")
    unknown("unknown");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TransactionType) "$data" else null

        /**
         * Returns a valid [TransactionType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TransactionType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

