/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.powens.api.model

import com.powens.api.model.TransactionAccount
import com.powens.api.model.TransactionCommissionCurrency
import com.powens.api.model.TransactionCounterparty
import com.powens.api.model.TransactionOriginalCurrency
import com.powens.api.model.TransactionType

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * A bank transaction.
 *
 * @param id ID of the transaction.
 * @param idAccount ID of the related account.
 * @param date Debit date.
 * @param type 
 * @param dateScraped Date and time when the transaction has been seen.
 * @param rdate Realization date of the transaction.
 * @param coming If true, this transaction hasn't been debited yet.
 * @param active If false, PFM services will ignore this transaction.
 * @param applicationDate Date considered by PFM services. This date can be edited.
 * @param datetime Date and time of the debit of the transaction, if available, in UTC.
 * @param `value` Value of the transaction.
 * @param grossValue Gross value of the transaction.
 * @param originalValue Value in the original currency.
 * @param originalGrossValue Gross value in the original currency.
 * @param originalCurrency 
 * @param commission Commission taken on the transaction.
 * @param commissionCurrency 
 * @param wording Label of the transaction, can be edited.
 * @param idCategory ID of the related category.
 * @param rdatetime Realization date and time of the transaction, if available, in UTC.
 * @param vdate Value date of the transaction.
 * @param vdatetime Value date and time of the transaction, if available, in UTC.
 * @param bdate Date used by the bank for the transaction.
 * @param bdatetime Date and time used by the bank for the transaction, if available, in UTC.
 * @param idCluster If the transaction is part of a cluster.
 * @param country Original country.
 * @param card Card number associated with the transaction.
 * @param counterparty 
 * @param comment User comment.
 * @param lastUpdate Last update of the transaction.
 * @param deleted If set, this transaction has been removed from the bank.
 * @param account 
 */
@Serializable

data class Transaction (

    /* ID of the transaction. */
    @SerialName(value = "id") @Required val id: kotlin.Long,

    /* ID of the related account. */
    @SerialName(value = "id_account") @Required val idAccount: kotlin.Long,

    /* Debit date. */
    @SerialName(value = "date") @Required val date: kotlinx.datetime.LocalDate,

    @SerialName(value = "type") @Required val type: TransactionType,

    /* Date and time when the transaction has been seen. */
    @SerialName(value = "date_scraped") @Required val dateScraped: kotlin.String,

    /* Realization date of the transaction. */
    @SerialName(value = "rdate") @Required val rdate: kotlinx.datetime.LocalDate,

    /* If true, this transaction hasn't been debited yet. */
    @SerialName(value = "coming") @Required val coming: kotlin.Boolean,

    /* If false, PFM services will ignore this transaction. */
    @SerialName(value = "active") @Required val active: kotlin.Boolean,

    /* Date considered by PFM services. This date can be edited. */
    @SerialName(value = "application_date") val applicationDate: kotlinx.datetime.LocalDate? = null,

    /* Date and time of the debit of the transaction, if available, in UTC. */
    @SerialName(value = "datetime") val datetime: kotlin.String? = null,

    /* Value of the transaction. */
    @SerialName(value = "value") val `value`: kotlin.Double? = null,

    /* Gross value of the transaction. */
    @SerialName(value = "gross_value") val grossValue: kotlin.Double? = null,

    /* Value in the original currency. */
    @SerialName(value = "original_value") val originalValue: kotlin.Double? = null,

    /* Gross value in the original currency. */
    @SerialName(value = "original_gross_value") val originalGrossValue: kotlin.Double? = null,

    @SerialName(value = "original_currency") val originalCurrency: TransactionOriginalCurrency? = null,

    /* Commission taken on the transaction. */
    @SerialName(value = "commission") val commission: kotlin.Double? = null,

    @SerialName(value = "commission_currency") val commissionCurrency: TransactionCommissionCurrency? = null,

    /* Label of the transaction, can be edited. */
    @SerialName(value = "wording") val wording: kotlin.String? = null,

    /* ID of the related category. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "id_category") val idCategory: kotlin.Long? = null,

    /* Realization date and time of the transaction, if available, in UTC. */
    @SerialName(value = "rdatetime") val rdatetime: kotlin.String? = null,

    /* Value date of the transaction. */
    @SerialName(value = "vdate") val vdate: kotlinx.datetime.LocalDate? = null,

    /* Value date and time of the transaction, if available, in UTC. */
    @SerialName(value = "vdatetime") val vdatetime: kotlin.String? = null,

    /* Date used by the bank for the transaction. */
    @SerialName(value = "bdate") val bdate: kotlinx.datetime.LocalDate? = null,

    /* Date and time used by the bank for the transaction, if available, in UTC. */
    @SerialName(value = "bdatetime") val bdatetime: kotlin.String? = null,

    /* If the transaction is part of a cluster. */
    @SerialName(value = "id_cluster") val idCluster: kotlin.Long? = null,

    /* Original country. */
    @SerialName(value = "country") val country: kotlin.String? = null,

    /* Card number associated with the transaction. */
    @SerialName(value = "card") val card: kotlin.String? = null,

    @SerialName(value = "counterparty") val counterparty: TransactionCounterparty? = null,

    /* User comment. */
    @SerialName(value = "comment") val comment: kotlin.String? = null,

    /* Last update of the transaction. */
    @SerialName(value = "last_update") val lastUpdate: kotlin.String? = null,

    /* If set, this transaction has been removed from the bank. */
    @SerialName(value = "deleted") val deleted: kotlin.String? = null,

    @SerialName(value = "account") val account: TransactionAccount? = null

)

