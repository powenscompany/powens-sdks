/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.powens.api.client.services

import com.powens.api.model.AccessToken
import com.powens.api.model.AccessTokenRequest
import com.powens.api.model.AuthCode
import com.powens.api.model.ExchangeAccessToken
import com.powens.api.model.ExchangeAccessTokenRequest
import com.powens.api.model.RenewAccessTokenRequest
import com.powens.api.model.ServiceAccessToken
import com.powens.api.model.ServiceAccessTokenRequest

import com.powens.api.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class AuthenticationApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Exchange a temporary code for a permanent user access token
     * This endpoint uses the received temporary token to generate a permanent user access token. 
     * @param exchangeAccessTokenRequest  (optional)
     * @return ExchangeAccessToken
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun exchangeAccessToken(exchangeAccessTokenRequest: ExchangeAccessTokenRequest? = null): HttpResponse<ExchangeAccessToken> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = exchangeAccessTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/token/access",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }




    /**
     * enum for parameter type
     */
    @Serializable
    enum class TypeGetAuthCode(val value: kotlin.String) {
        
        @SerialName(value = "requestAccess")
        RequestAccess("requestAccess"),
        
        @SerialName(value = "singleAccess")
        SingleAccess("singleAccess")
        
    }

    /**
     * Generate a temporary code
     * This endpoint requires header authentication with a valid user access token. This endpoint generates a new temporary code for the current user. In case the access token is already used by a trusted device, and you want to temporarily let another one (for example a web browser) access user resources, use this endpoint to generate a code that will expire in 30 minutes. If the generated code is intended to be used with our webview, you can use the &#x60;singleAccess&#x60; token type. 
     * @param type The type of the temporary code. Default is &#x60;requestAccess&#x60;. (optional)
     * @return AuthCode
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAuthCode(type: TypeGetAuthCode? = null): HttpResponse<AuthCode> {

        val localVariableAuthNames = listOf<String>("bearerAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        type?.apply { localVariableQuery["type"] = listOf("$type") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/auth/token/code",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Generate a service token
     * This endpoint generates a special access token with a dedicated service scope. The generated token will expire after 30 minutes. A service token is a token that is not associated with a user but rather used to access a specific feature or service. For example, the Pay product requires the use of a payment token. Requested permissions are defined in the scope of the token. 
     * @param serviceAccessTokenRequest  (optional)
     * @return ServiceAccessToken
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getServiceAccessToken(serviceAccessTokenRequest: ServiceAccessTokenRequest? = null): HttpResponse<ServiceAccessToken> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = serviceAccessTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create a new anonymous user
     * This endpoint generates a new token related to a *new anonymous user*. If &#x60;client_id&#x60; and &#x60;client_secret&#x60; are both supplied, or if you call this endpoint with a manage token, the generated token will be *permanent*. Otherwise, it will expire after 30 minutes. 
     * @param accessTokenRequest  (optional)
     * @return AccessToken
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun initUserToken(accessTokenRequest: AccessTokenRequest? = null): HttpResponse<AccessToken> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = accessTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/init",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Generate a new permanent access token for an existing user
     * This endpoint generates a new permanent access token for an existing user, and revokes former tokens if explicitly requested. 
     * @param renewAccessTokenRequest  (optional)
     * @return ExchangeAccessToken
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun renewAccessToken(renewAccessTokenRequest: RenewAccessTokenRequest? = null): HttpResponse<ExchangeAccessToken> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = renewAccessTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/renew",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Revoke an access token
     * This endpoint invalidates permanent access tokens. Subsequent calls using the provided permanent access token will fail. 
     * @return void
     */
    open suspend fun revokeAccessToken(): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/auth/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
