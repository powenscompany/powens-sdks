/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.powens.api.model


import kotlinx.serialization.*

/**
 * The type code of a bank account:  * `article83`: Article 83  * `capitalisation`: Capitalization contract  * `card`: Card  * `checking`: Checking account  * `crowdlending`: Crowdlending  * `deposit`: Deposit account  * `joint`: Joint account  * `lifeinsurance`: Life insurance account  * `loan`: Loan  * `madelin`: Madelin retirement contract  * `market`: Market account  * `pea`: Shared savings plan (Plan d'Epargne en Actions)  * `pee`: Company savings plan (Plan d'Epargne Entreprise)  * `per`: Retirement savings plan (Plan d'Epargne Retraite)  * `perco`: Group retirement savings plan (Plan d'Epargne pour la Retraite Collectif)  * `perp`: Popular retirement savings plan (Plan d'Epargne Retraite Populaire)  * `real_estate`: Real estate placement  * `rsp`: Special profit-sharing reserve (Réserve Spéciale de Participation)  * `savings`: Savings account  * `unknown`: Unknown account type 
 *
 * Values: article83,capitalisation,card,checking,crowdlending,deposit,joint,lifeinsurance,loan,madelin,market,pea,pee,per,perco,perp,realEstate,rsp,savings,unknown
 */
@Serializable
enum class BankAccountTypeName(val value: kotlin.String) {

    @SerialName(value = "Article83")
    article83("Article83"),

    @SerialName(value = "capitalisation")
    capitalisation("capitalisation"),

    @SerialName(value = "card")
    card("card"),

    @SerialName(value = "checking")
    checking("checking"),

    @SerialName(value = "crowdlending")
    crowdlending("crowdlending"),

    @SerialName(value = "deposit")
    deposit("deposit"),

    @SerialName(value = "joint")
    joint("joint"),

    @SerialName(value = "lifeinsurance")
    lifeinsurance("lifeinsurance"),

    @SerialName(value = "loan")
    loan("loan"),

    @SerialName(value = "madelin")
    madelin("madelin"),

    @SerialName(value = "market")
    market("market"),

    @SerialName(value = "pea")
    pea("pea"),

    @SerialName(value = "pee")
    pee("pee"),

    @SerialName(value = "per")
    per("per"),

    @SerialName(value = "perco")
    perco("perco"),

    @SerialName(value = "perp")
    perp("perp"),

    @SerialName(value = "real_estate")
    realEstate("real_estate"),

    @SerialName(value = "rsp")
    rsp("rsp"),

    @SerialName(value = "savings")
    savings("savings"),

    @SerialName(value = "unknown")
    unknown("unknown");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is BankAccountTypeName) "$data" else null

        /**
         * Returns a valid [BankAccountTypeName] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): BankAccountTypeName? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

